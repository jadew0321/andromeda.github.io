<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jade</title>
  
  <subtitle>Notes for Machine Learning</subtitle>
  <link href="/andromeda.github.io/atom.xml" rel="self"/>
  
  <link href="https://jadew0321.github.io/andromeda.github.io/"/>
  <updated>2020-07-09T11:57:02.648Z</updated>
  <id>https://jadew0321.github.io/andromeda.github.io/</id>
  
  <author>
    <name>Jade W</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Handling Variable-Dimensional Time Series with Graph Neural Networks</title>
    <link href="https://jadew0321.github.io/andromeda.github.io/2020/07/09/Handling-Variable-Dimensional-Time-Series-with-Graph-Neural-Networks/"/>
    <id>https://jadew0321.github.io/andromeda.github.io/2020/07/09/Handling-Variable-Dimensional-Time-Series-with-Graph-Neural-Networks/</id>
    <published>2020-07-09T02:10:20.000Z</published>
    <updated>2020-07-09T11:57:02.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MOTIVATION"><a href="#MOTIVATION" class="headerlink" title="MOTIVATION"></a>MOTIVATION</h1><ul><li><p>物联网(IoT)技术的一些应用涉及<u>从多个传感器捕获数据</u>，从而产生多传感器时间序列。</p></li><li><p>现有的基于神经网络（NN）的多变量时间序列建模方法<u>假设传感器的输入维数（即传感器的数量）是固定的。</u></p></li><li><p>在实际应用中，例如手机、穿戴设备、工业设备等，这些<u>相同设备的不同实例安装的传感器组合通常是不同的</u>，因此无论下游任务是预测还是分类，模型在设计时就<u>需要考虑不同(可变)的输入维度</u>，以构造一个针对某一设备来说<u>较为通用的模型架构</u>。</p></li></ul><h1 id="INTRODUCTION"><a href="#INTRODUCTION" class="headerlink" title="INTRODUCTION"></a>INTRODUCTION</h1><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>由于IoT的快速发展，设备范围的不断扩大，多传感器时间序列数据无处不在并且快速增长。深度学习方法已经成功地应用于多元时间序列预测、分类、异常检测和剩余有用寿命估计。</p><h3 id="假设与矛盾"><a href="#假设与矛盾" class="headerlink" title="假设与矛盾"></a>假设与矛盾</h3><p>大多数现有的对多变量时间序列数据建模的方法假设固定维的时间序列作为输入，<u>这在许多实际情况下，这种假设可能并不成立</u>。例如，在学习活动识别模型时，由于穿戴设备实例的不同，不同人的时间序列可能<u>涉及到不同数量的可用传感器</u>(如加速度计、陀螺仪、磁力仪)。类似地，设备运行状况监控模型也需要处理来自不同实例设备的数据，这些<u>实例上安装了不同的传感器</u>(比如温度、振动和压力)。</p><h3 id="针对场景"><a href="#针对场景" class="headerlink" title="针对场景"></a>针对场景</h3><p>在这项工作中，作者考虑了<u>由同一底层动力系统的不同实例</u>(例如在活动识别中的人)生成多个<u>不同传感器组合的多元时间序列分析问题</u>。即网络的输入维度是不确定的，（但不超过某个最大上限）。</p><h3 id="方法优势"><a href="#方法优势" class="headerlink" title="方法优势"></a>方法优势</h3><p>提出的模型在<u>zero-shot （测试集中可用传感器的组合与训练集中的组合都不相同）</u>和<u>fine-tuning （训练集中包含有少量与测试实例相同组合的样本可用于微调）</u>两个设定实验下性能优于普通NN模型，并且<u>通过ablation study验证了模型各个组成成分的有效性</u>。</p><h1 id="RELATED-WORKS"><a href="#RELATED-WORKS" class="headerlink" title="RELATED WORKS"></a>RELATED WORKS</h1><ul><li>把传感器个数的变化看作是缺失值，常用的处理时间序列实例中传感器丢失的方法是根据其他实例中传感器可用时的统计数据，为该缺失传感器假定一个常数值（通常是均值）。<u>但是随着测试实例中传感器丢失百分比的增加，该方法的性能会迅速下降。</u></li><li>仍然是把传感器个数的变化看作是缺失值，一般使用平滑、插值和样条等数据填充方法。<u>由于它们依赖于时间序列中每个维度至少有一个可用值的情况，因此不适用于整条时间序列缺失的问题设置。</u></li><li>针对不同的传感器组合，为每一种可能的组合训练不同结构和参数的网络。<u>不足是：1)当可能组合的数量呈指数级增长时，网络扩展困难; 2)假设每一种组合都有足够的训练数据可用; 3)且不同模型训练时不保留任何跨组合的知识。</u></li></ul><p><em>以上相关方法，都有一定的缺陷，因此作者在GNN、transfer-learning、meta-learning的启发下，提出了一种新的神经网络结构，适用于zero-shot 和fine-tuning迁移学习，能够实现在测试时对多变量时间序列进行鲁棒的推理，且这些多变量时间序列中的有效维度（即可用的传感器组合）是未知的。</em></p><h1 id="PROBLEM-DEFINITION"><a href="#PROBLEM-DEFINITION" class="headerlink" title="PROBLEM DEFINITION"></a>PROBLEM DEFINITION</h1><p>对本问题场景进行数学上的描述，对于符号达成以下共识：</p><ul><li>考虑一个训练集 $\mathcal{D}={(x_i,y_i)}^N_{i=1}$，具有$N$个多变量的时间序列 $x_i \in \mathcal{X}$ 和对应的标签 $y_i \in \mathcal{Y}$。</li><li>每个时间序列 $\mathbf{x}_{i}=\left\{\mathbf{x}_{i}^{t}\right\}_{t=1}^{T_{i}}$的长度都为 $T_i\in\mathcal{T}$。</li><li>$\mathcal{S}$表示包含所有传感器的集合，共$d$维（即变量最大维度为$d$）；$\mathcal{S}_i \subseteq \mathcal{S}$表示不同的传感器组合，其下标 $i$与 $\mathbf{x}_{i}$ 中的下标对应，表示当前组合包含的可用传感器共$d_i$维，$1 \leq d_{i} \leq d$。</li><li>对于某个时刻$t$来说，$\mathbf{x}_{i}^{t}$ 是 一个 $d_i$ 维的向量，即 $\mathbf{x}_{i}^{t} \in \mathbb{R}^{d_{i}}$。</li><li>下游任务的目标是，学习到 $\mathcal{X}$ 与 $\mathcal{Y}$ 之间的映射关系：$f: \mathcal{X} \rightarrow \mathcal{Y}$。</li></ul><h1 id="APPROACH"><a href="#APPROACH" class="headerlink" title="APPROACH"></a>APPROACH</h1><p>作者提出一个新的基于GNN的时间序列分析模型，利用神经网络架构（GRU，当然LSTM也可）与两个全新的模块：</p><ul><li><p>core dynamics module——用于<u>对数据的时序特性进行建模</u>；</p></li><li><p>conditioning module——基于不同的传感器组合，<u>利用GNN学习各可用传感器之间的信息聚合关系，并生产一个“conditioning vector”作为附加输入传递至core dynamic module</u>，对时序特性的建模进行定制化调整。</p></li></ul><p>模型总体架构示意图如下所示：</p><p><img src="/andromeda.github.io/andromeda.github.io/2020/07/09/Handling-Variable-Dimensional-Time-Series-with-Graph-Neural-Networks/My_Github\blog\img\20200709Handling Variable-Dimensional Time Series with Graph Neural Networks\20200709Handling Variable-Dimensional Time Series with Graph Neural Networks_1.jpg" alt></p><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><ul><li><p>Details</p><p>首先<u>确定最大变量维度d</u>，所有变量组合的维度$1 \leq d_{i} \leq d$。如左下角的Input Time Series(x) 所示，对第二维<u>缺失传感器数值的维度进行mean-imputed</u>，即该传感器在其他实例中可用时的平均值，预处理后的多变量时序数据$\mathbf{x}_{i}$中每个时刻的输入都是一个d维向量。</p><p><em>这个操作实质上是为了能把等长维度的数据喂给GRU网络作为输入。</em></p></li></ul><h2 id="Conditioning-Module"><a href="#Conditioning-Module" class="headerlink" title="Conditioning Module"></a>Conditioning Module</h2><ul><li>Details<ul><li>每个传感器$s\in \mathcal{S}$与一个可学习的embeding vector嵌入向量$v_s\in \mathbb{R}^{d_{s}}$相关联，对应于传感器组合$\mathcal{S}$，考虑图$\mathcal{G}(\mathcal{V}, \mathcal{E})$，每个$s\in\mathcal{S}$对应一个节点$v_s\in \mathcal{V}$，每个节点$v_s$的邻节点用<script type="math/tex">\mathcal{N}_{\mathcal{G}}\left(v_{s}\right)</script>表示。</li><li>对于一个特定的多个传感器的组合，只有</li></ul></li></ul><h2 id="Core-Dynamics-Module"><a href="#Core-Dynamics-Module" class="headerlink" title="Core Dynamics Module"></a>Core Dynamics Module</h2><h1 id="EXPERIMENT"><a href="#EXPERIMENT" class="headerlink" title="EXPERIMENT"></a>EXPERIMENT</h1><ul><li></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MOTIVATION&quot;&gt;&lt;a href=&quot;#MOTIVATION&quot; class=&quot;headerlink&quot; title=&quot;MOTIVATION&quot;&gt;&lt;/a&gt;MOTIVATION&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;物联网(IoT)技术的一些应用涉及&lt;u&gt;从多个传感器捕获数
      
    
    </summary>
    
    
      <category term="GNN" scheme="https://jadew0321.github.io/andromeda.github.io/categories/GNN/"/>
    
    
      <category term="paper" scheme="https://jadew0321.github.io/andromeda.github.io/tags/paper/"/>
    
  </entry>
  
</feed>
